{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is QSpace?","text":"<p>QSpace is an advanced open-source tensor library specifically designed to handle both Abelian and non-Abelian symmetries. Embedded in C++ and interfaced with Matlab, QSpace facilitates quantum symmetry spaces in tensor network states. Its capabilities allow users to exploit a variety of symmetries, including the U(1) and special unitary groups, making it versatile for different operations across symmetries. QSpace's design emphasizes a bottom-up approach, starting from the defining representation and utilizing Clebsch-Gordan coefficient tensors. This approach makes QSpace a powerful tool for developing tensor network algorithms, providing a user-friendly environment while handling complex symmetry details.</p>"},{"location":"Linux/","title":"Installation on Linux","text":"<p>[TODO]</p>"},{"location":"contribg/","title":"How to Contribute","text":""},{"location":"contribg/#introduction","title":"Introduction","text":"<p>When contributing to our this documentation, it's crucial to adhere to a structured Git branching strategy. This ensures that the codebase remains stable and manageable, allowing for efficient development and release processes.</p>"},{"location":"contribg/#branching-strategy","title":"Branching Strategy","text":"<p>We use three types of branches in our workflow:</p> <ol> <li>Main Branch: Reserved for production releases.</li> <li>Develop Branch: Used for integrating new contents and fixes.</li> <li>Contributor-Specific Branch (e.g., <code>&lt;name&gt;</code>): For individual contributors to create new contents or fixes.</li> </ol>"},{"location":"contribg/#why-this-strategy","title":"Why This Strategy?","text":"<ul> <li>Stability: By restricting direct pushes to the <code>main</code> branch, we ensure that only thoroughly reviewed contents get deployed.</li> <li>Continuous Integration: The <code>develop</code> branch serves as an integration point, allowing for regular testing and early detection of conflicts.</li> <li>Ownership and Isolation: Contributor-specific branches allow contributors to work independently on their tasks without interfering with others' work.</li> </ul>"},{"location":"contribg/#workflow-steps-and-git-commands","title":"Workflow Steps and Git Commands","text":""},{"location":"contribg/#1-setup-your-workspace","title":"1. Setup Your Workspace","text":"<p>Before you start, ensure you have the latest version of the <code>develop</code> branch.</p> <pre><code>git checkout develop\ngit pull origin develop\n</code></pre>"},{"location":"contribg/#2-create-your-contributor-specific-branch","title":"2. Create Your Contributor-Specific Branch","text":"<p>Create a new branch for your work. Replace <code>&lt;name&gt;</code> with your branch name.</p> <pre><code>git checkout -b &lt;name&gt;\n</code></pre>"},{"location":"contribg/#3-implement-your-changes","title":"3. Implement Your Changes","text":"<p>Make your changes, commit them to your branch. Replace <code>&lt;commit-message&gt;</code> with a meaningful description of your changes.</p> <pre><code># Add files to the staging area\ngit add .\n\n# Commit changes\ngit commit -m \"&lt;commit-message&gt;\"\n</code></pre>"},{"location":"contribg/#4-keep-your-branch-updated","title":"4. Keep Your Branch Updated","text":"<p>Regularly update your branch with changes from the <code>develop</code> branch to avoid conflicts later.</p> <pre><code>git checkout develop\ngit pull origin develop\ngit checkout &lt;name&gt;\ngit merge develop\n</code></pre> <p>Resolve any conflicts that arise from the merge.</p>"},{"location":"contribg/#5-finalizing-your-contribution","title":"5. Finalizing Your Contribution","text":"<p>Once your contents or fixes are complete:</p> <ul> <li>Pull the latest <code>develop</code> branch.</li> <li>Merge it into your branch.</li> <li>Solve any conflicts.</li> </ul> <pre><code>git checkout develop\ngit pull origin develop\ngit checkout &lt;name&gt;\ngit merge develop\n</code></pre>"},{"location":"contribg/#6-merge-back-to-develop","title":"6. Merge Back to Develop","text":"<p>After resolving conflicts and ensuring the local website works as expected, merge your branch back to <code>develop</code>.</p> <pre><code>git checkout develop\ngit merge &lt;name&gt;\n</code></pre>"},{"location":"contribg/#7-push-to-develop","title":"7. Push to Develop","text":"<p>Push your changes to the remote <code>develop</code> branch. Your code will be reviewed before merging.</p> <pre><code>git push origin develop\n</code></pre>"},{"location":"contribg/#8-code-review-and-testing","title":"8. Code Review and Testing","text":"<p>Once pushed, your code will undergo review and testing by peers and CI tools.</p> <p>Note</p> <p>The <code>main</code> branch is off-limits for direct contributions. It is exclusively managed by the administrator for stable releases.</p> <p>This workflow, while structured, ensures that our codebase remains clean, stable, and manageable. By following these guidelines, you contribute not only code but also to the overall health and quality of the project.</p> <p> </p>"},{"location":"installation/","title":"Installation","text":"<p>[TODO]</p>"},{"location":"iterdiag/","title":"Iterative Diagonalization","text":"<p>[TODO]</p>"},{"location":"macOS/","title":"Installation on macOS","text":"<p>[TODO]</p>"},{"location":"mdref/","title":"Markdown Syntax Guide","text":"<p>Welcome to the world of Markdown! Markdown is a simple way to format text that can be easily converted to HTML. It's widely used in writing for the web, documentation, and much more. This guide will help you understand the basics of Markdown formatting.</p>"},{"location":"mdref/#headings","title":"HeadingsHeading","text":"<p>Headings are used to structure your document. Markdown supports six levels of headings, which are created with <code>#</code> symbols:</p> MarkdownRendered Result <pre><code># h1 Heading\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n</code></pre> <p>Heading Heading Heading</p> <p>Just add the number of <code>#</code> symbols corresponding to the level of heading you want.</p>"},{"location":"mdref/#horizontal-rules","title":"Horizontal Rules","text":"<p>To create a thematic break or a horizontal rule, use three or more dashes, e.g. <code>---</code> renders as:</p> <p>This is typically used to signify a major topic change in your document.</p>"},{"location":"mdref/#emphasis","title":"Emphasis","text":"<p>To emphasize text, you can use bold or italic formatting:</p> <p>Bold: Wrap your text with two asterisks or underscores.</p> MarkdownRendered Result <pre><code>**This is bold text**\n__This is also bold__\n</code></pre> <p>This is bold text This is also bold</p> <p>Italic: Wrap your text with one asterisk or underscore.</p> MarkdownRendered Result <pre><code>*This is italic text*\n_This is also italic_\n</code></pre> <p>This is italic text This is also italic</p>"},{"location":"mdref/#blockquotes","title":"Blockquotes","text":"<p>Blockquotes are used for quoting text from another source. Use the <code>&gt;</code> symbol:</p> MarkdownRendered Result <pre><code>&gt; Blockquotes can also be nested...\n&gt;&gt; ...by using additional greater-than signs right next to each other...\n&gt; &gt; &gt; ...or with spaces between arrows.\n</code></pre> <p>Blockquotes can also be nested...</p> <p>...by using additional greater-than signs right next to each other...</p> <p>...or with spaces between arrows.</p>"},{"location":"mdref/#lists","title":"Lists","text":"<p>Lists are a great way to organize information.</p> <p>Unordered Lists: Start a line with <code>+</code>, <code>-</code>, or <code>*</code>:</p> MarkdownRendered Result <pre><code>+ Item 1\n+ Item 2\n- Subitem 2.1\n- Subitem 2.2\n</code></pre> <ul> <li>Item 1</li> <li>Item 2</li> <li>Subitem 2.1</li> <li>Subitem 2.2</li> </ul> <p>Ordered Lists: Use numbers followed by a period:</p> MarkdownRendered Result <pre><code>1. First item\n2. Second item\n3. Third item\n</code></pre> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol> <p>You can also use the same number to let Markdown handle the numbering:</p> MarkdownRendered Result <pre><code>1. Item\n1. Item\n1. Item\n</code></pre> <ol> <li>Item</li> <li>Item</li> <li>Item</li> </ol>"},{"location":"mdref/#code","title":"Code","text":"<p>There are several ways to represent code in Markdown.</p> <ul> <li>Inline Code: For small bits of code, use backticks:</li> </ul> <p>This is an inline <code>code</code> example.</p> <ul> <li>Indented Code: Indent your code by four spaces or a tab for block code:</li> </ul> <pre><code>    This is a block of code.\n</code></pre> <ul> <li>Fenced Code Blocks: Use triple backticks and optionally specify the language for syntax highlighting:</li> </ul> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"mdref/#equations","title":"Equations","text":"<p>MathJax allows you to display mathematical notation in Markdown documents. With MathJax, you can write complex mathematical expressions using LaTeX syntax. To use MathJax in your document, you have two main options: inline math and display math.</p> <ul> <li>Inline Math: For inline mathematical expressions, enclose your LaTeX code within single dollar signs <code>$</code>. This method is used when you want to include math expressions within a line of text.</li> </ul> MarkdownRendered Result <pre><code>$E = mc^2$\n</code></pre> <p>\\(E = mc^2\\)</p> <ul> <li>Display Math: For larger expressions or equations that you want to display on their own line, use double dollar signs <code>$$</code> to enclose your LaTeX code. This centers the math expression and puts it on a new line.</li> </ul> MarkdownRendered Result <pre><code>$$\n\\begin{align*}\na^2 + b^2 &amp;= c^2 \\\\\ne^{i\\pi} + 1 &amp;= 0\n\\end{align*}\n$$\n</code></pre> \\[ \\begin{align*} a^2 + b^2 &amp;= c^2 \\\\ e^{i\\pi} + 1 &amp;= 0 \\end{align*} \\] <p>Remember, for complex LaTeX expressions, ensure that your syntax is correct as MathJax will render exactly what is written within the delimiters.</p>"},{"location":"mdref/#tables","title":"Tables","text":"<p>Create tables using dashes <code>-</code> for headers and pipes <code>|</code> for columns:</p> MarkdownRendered Result <pre><code>| Header 1 | Header 2 |\n| -------- | -------- |\n| Row 1    | Data     |\n| Row 2    | Data     |\n</code></pre> Header 1 Header 2 Row 1 Data Row 2 Data <p>To align columns, use colons <code>:</code> in the header row:</p> MarkdownRendered Result <pre><code>| Left Aligned | Right Aligned | Center Aligned |\n| :----------- | ------------: | :------------: |\n| left         |         right |     center     |\n</code></pre> Left Aligned Right Aligned Center Aligned left right center"},{"location":"mdref/#links-and-images","title":"Links and Images","text":"<ul> <li>Links: To create a link, wrap the link text in brackets <code>[ ]</code>, followed by the URL in parentheses <code>( )</code>:</li> </ul> MarkdownRendered Result <pre><code>This is a link to the [Google Website](https://www.google.com)\n</code></pre> <p>This is a link to the Google Website</p> <p>For a link with a title, add the title in quotes after the URL:</p> MarkdownRendered Result <pre><code>This is a link to the [Google Website](https://www.google.com \"Google Homepage\")\n</code></pre> <p>This is a link to the Google Website</p> <ul> <li>Images: Similar to links, but start with an exclamation mark <code>!</code>:</li> </ul> MarkdownRendered Result <pre><code>&lt;figure markdown&gt;\n  ![Alt text](../assets/QSpace.png){ width=\"300\" }\n&lt;/figure&gt;\n</code></pre> <p> </p>"},{"location":"mdref/#extended-syntax-and-functionalities","title":"Extended Syntax and Functionalities","text":"<p>In our documentation, we leverage Markdown extensions to enrich the standard Markdown syntax. These extensions are invaluable for adding advanced formatting and interactive elements that are not possible with basic Markdown. They are particularly useful in creating comprehensive and user-friendly documentation, allowing for more engaging and organized content.</p> <p>For example, extensions enable the inclusion of tabbed content, detailed footnotes, custom admonition blocks, and enhanced code blocks with syntax highlighting. To explore the full range of possibilities these extensions offer, and for detailed syntax reference, please visit MkDocs Material Extensions Reference.</p> <p> </p>"},{"location":"mkdocsg/","title":"Comprehensive MkDocs Guide","text":""},{"location":"mkdocsg/#introduction-to-mkdocs","title":"Introduction to MkDocs","text":""},{"location":"mkdocsg/#what-is-mkdocs","title":"What is MkDocs?","text":"<p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p>"},{"location":"mkdocsg/#key-features","title":"Key Features","text":"<ul> <li>Ease of Use: MkDocs is straightforward to set up. All you need is your documentation in Markdown format. No database is required.</li> <li>Theme Support: MkDocs comes with a built-in theme. Additional themes can be installed via <code>pip</code>. This site is built with the Material for MkDocs theme.</li> <li>Host Anywhere: MkDocs builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose.</li> <li>Markdown Centric: Focus on your project's documentation and not on the tooling to make your documentation work. Additional features can be incorporated via extensions.</li> </ul>"},{"location":"mkdocsg/#mkdocs-directory-structure","title":"MkDocs Directory Structure","text":"<p>When you create a new project, MkDocs will automatically create the a directory structure and files. If you pull this repository, the directory structure is already set up, which looks like this:</p> Directory Structure<pre><code>project_name/\n\u2502\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md    # The main documentation page.\n\u2502   \u2514\u2500\u2500 ...         # Other markdown pages for your documentation.\n\u2502\n\u2514\u2500\u2500 mkdocs.yml      # The MkDocs configuration file.\n</code></pre> <ul> <li><code>docs/</code>: This directory contains all your documentation in Markdown format.</li> <li><code>mkdocs.yml</code>: This is the configuration file for your MkDocs site.</li> </ul> <p>Note</p> <p>It is possible to have subdirectories within the <code>docs/</code> directory. This is useful for organizing the documentation into sections. However, please inform the administrator if you plan to do this.</p>"},{"location":"mkdocsg/#mkdocs-yaml-configuration","title":"MkDocs YAML Configuration","text":"<p>The <code>mkdocs.yml</code> file is where you configure your documentation site. YAML, which stands for \"YAML Ain't Markup Language,\" is a human-readable data serialization format. YAML files typically end with the .yml or .yaml extension and use indentation to represent data hierarchies, making it visually clear and straightforward. This format is often preferred for writing configuration files, like those used in MkDocs.</p>"},{"location":"mkdocsg/#basic-configuration","title":"Basic Configuration:","text":"<ul> <li>site_name: Title of your documentation site.</li> <li>nav: Structure of your site's navigation.</li> </ul>"},{"location":"mkdocsg/#example-mkdocsyml","title":"Example <code>mkdocs.yml</code>:","text":"mkdocs.yml<pre><code>site_name: QSpace Documentation\nnav:\n    - Home: index.md\n    - About: about.md\n    - User Guide:\n        - Writing Docs: user-guide/writing.md\n        - Styling Docs: user-guide/styling.md\n</code></pre> <p>Warning</p> <p>You will see many more configuration options in the <code>mkdocs.yml</code> file in this repository. Please do not touch any of the settings other than the ones mentioned above. If you have any questions, please contact the administrator.</p>"},{"location":"mkdocsg/#installing-building-and-using-mkdocs","title":"Installing, Building, and Using MkDocs","text":"<p>Before you start building the project, you will need to create a Python virtual environment. A Python environment is a self-contained directory that holds a specific version of Python and a collection of Python packages. Think of it as an isolated workspace for Python projects, ensuring that each project has its own dependencies and settings, separate from other projects. This isolation prevents conflicts between project requirements and allows for more organized and manageable development. The most common tool for creating Python environments is venv, which is included in the Python Standard Library.</p>"},{"location":"mkdocsg/#create-a-python-virtual-environment","title":"Create a Python Virtual Environment:","text":"<pre><code>python -m venv venv\n</code></pre> <ul> <li><code>python -m venv</code>: This command tells Python to create a new virtual environment.</li> <li><code>venv</code>: This is the name of the virtual environment folder. You can name it anything, but <code>venv</code> is a common convention. The administrator highly recommends using this name for convenience in version control. If you strongly prefers another name, please ensure that this directory is excluded in your <code>.gitignore</code> file, and you should not commit your <code>.gitignore</code> file to the repository.</li> </ul> <p>Note</p> <p>This project has been tested for Python 3.10.11. The command to use may differ depending on the version and platform you are working with. In general, Python 3.10 and above should work without any issues.</p>"},{"location":"mkdocsg/#activatedeactivate-the-virtual-environment","title":"Activate/Deactivate the Virtual Environment:","text":"<p>The Python virtual environment can be activated using the following commands:</p> Linux/MacOSWindows <pre><code>source venv/bin/activate\n</code></pre> <ul> <li><code>source</code>: This command changes the current shell\u2019s environment to the one provided.</li> <li><code>venv/bin/activate</code>: This is the path to the activation script of the virtual environment. Running this script activates the virtual environment.</li> </ul> <pre><code>.\\venv\\Scripts\\activate\n</code></pre> <ul> <li><code>.\\venv\\Scripts\\activate</code>: This command activates the virtual environment on Windows. The path differs slightly from Linux/MacOS.</li> </ul> <p>The Python virtual environment can be deactivated using the following command (same for both Linux/MacOS and Windows):</p> <pre><code>deactivate\n</code></pre> <p>Warning</p> <p>You must activate the virtual environment every time you start working with this project. Otherwise, you will be using the system Python environment, which may cause conflicts with the packages you install. Also, please remember to deactivate the virtual environment when you are done working with this project.</p>"},{"location":"mkdocsg/#install-mkdocs-and-dependencies","title":"Install MkDocs and Dependencies:","text":"<p>The required packages and relevant dependencies (together with the required version) are listed in the <code>requirements.txt</code> file. To install these packages, run the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li><code>pip install -r</code>: This command is used to install packages listed in <code>requirements.txt</code> from the Python Package Index (PyPI).</li> <li><code>requirements.txt</code>: This file includes all the packages and dependencies for the project. Please do not modify this file before consulting the administrator.</li> </ul>"},{"location":"mkdocsg/#start-the-mkdocs-server","title":"Start the MkDocs Server:","text":"<p>MkDocs allows you to preview your documentation as you work on it, by running the website locally on your computer. Every time you make changes to your documentation, you can see the changes in real time in your browser. To start the MkDocs server, run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <ul> <li> <p><code>mkdocs serve</code>: This command starts a local server for your MkDocs site. It allows you to see your changes in real time as you work on your documentation.</p> </li> <li> <p>After running this command, MkDocs will start a web server accessible at <code>http://localhost:8000</code>. You can open this address in your web browser to see your documentation.</p> </li> </ul>"},{"location":"mkdocsg/#building-your-site","title":"Building Your Site:","text":"<pre><code>mkdocs build\n</code></pre> <ul> <li> <p><code>mkdocs build</code>: This command generates the static HTML files for your documentation. After running this command, you'll find these files in a folder named <code>site</code> within your project directory.</p> </li> <li> <p>The generated <code>site</code> directory can be hosted on any web server, GitHub Pages, or other hosting services for static sites.</p> </li> </ul> <p>By following these steps, you should be able to set up and use MkDocs in your local computers. If you have any questions, please contact the administrator Changkai Zhang at changkai.zhang@physik.lmu.de.</p> <p> </p>"},{"location":"reference/contractQS/","title":"contractQS","text":"<pre><code>function contractQS()\n\n    Contract set of QSpace tensors in a pairwise fashion\n    as described with usage #1 and #2 below. This automatically\n    also takes care of the underlying Clebsch Gordan coefficient\n    spaces if present based on X-symbols.\n\n    Each QSpace can be used as is, or as its 'conjugate' where the\n    conjugate of a QSpace A, i.e. conj(A) is defined as the QSpace\n\n     1) with all `arrows' reversed\n     2) keeping the SAME qlabels on all legs\n     3) and complex conjugation of all data{} if applicable,\n        i.e., if the (reduced) matrix elements are complex.\n\n    Because of (1), the specification of conjugate flags (`conj-flags')\n    is also important for QSpaces with all-real matrix elements.\n    For reversing individual arrows, see getIdentitQS(..,'-0').\n\nUsage #1: S=contractQS(A, ica, B, icb [, perm, OPTS ]);\n\n    Plain contraction of a single pair of QSpaces, A and B,\n    with respect to given explicitly specified  sets of\n    contraction indices ica and icb, which can be specified\n\n      - numerically (e.g. [1 2]),\n      - or as strings (e.g. '1,2', or '1 2')\n      - or as compact strings (e.g. '1,2', or '12')\n\n    The last 'compact format' is only possible / unique,\n    of course, if the tensors A and B do not have more than\n    9 legs (which basically never occurs), such that the\n    contraction indices reamin in the single digits\n    (this can be further relaxed, though, by extending the\n    digital range to letter, i.e. using a-z after 0-9).\n\n    The recommended way to specify conj-flag with usage #1\n    is together with the contraction indices in string notation!\n    For example,\n\n      contractQS(A,[1 3],B,[1 3],'conjA')  is equivalent to\n      contractQS(A,'1,3;*',B,[1 3])        is equivalent to\n      contractQS(A,'13*',B,'13')\n\n    (deprecated) options specific to usage #1:\n\n      'conjA'  use complex conjugate of A for contraction\n      'conjB'  use complex conjugate of B for contraction\n\nUsage #2: S=contractQS(A,..,{B,..,{C,..}},.. [, perm, OPTS ]);\n\n    Generalized 'cell-contraction' of tensors: when encountering\n    a cell, the content of that cell is contracted first, before\n    using its result. This allows the specification of an entire\n    patter of pairwise contractions based on a nested cell structure\n    where the lowest-level contractions are performed first.\n    An optional fully enveloping outer cell bracket at `base' level\n    as in S=contractQS({A,..,{B,..,{C,..}},..} [, perm, OPTS ])\n    is permitted, which may be used e.g., when debugging nested\n    parts of cell-contractions.\n\n    Cell contractions are furthermore based on QSpace `itags'\n    i.e. string labels for indices with up to 8chars, and which\n    are specified in QSpace.info.itags. This offers automated\n    contraction ('auto-contraction') of pairs of tensors solely\n    based on matching itags! Uusage #2 therefore does not (also)\n    allow explicit specification of contraction indices as in\n    usage #1.  Therefore itags (plus conj-flags) must be unique.\n\n    itags must always also contain individual conjugate flags\n    (this represent the bare minimum that must be specified with\n    each QSpacein v3): the conjugate flags on individual indices\n    (legs) of a tensor determine  whether that index (leg) is\n    in- or out-going, with the convention that\n\n        all out-going indices have a trailing * in their itags!\n\n    For example, an A-tensor with L(eft), R(ight), s(=local)\n    indices may have itags A.info.itags={'L','R*',s'}\n    assuming (L,R,s) index order.\n\n    In usage #2, for every operator additional optional strings\n    can be specified, appearing right after the affected tensor\n    e.g. QSpace A:\n\n      A,'!ij'  do not contract indices specified by ij (in compact\n               format) despite they share common matching itags.\n      A,'*'    apply overall (complex) conjugation on given input\n               tensor A (see early comments above)\n      A,'!ij*' both of the above in a single instruction\n               the conjugate flag '*' always trailing.\n\n      A,'ij'   [07/2023]\n      A,'ij*'  explicitly specify indices to contract\n               this is intended only for the case of degenerate itags\n               i.e., when identical itags appear on multiple legs\n               including the same conjugate flag.\n\n    itags may be set or adapted on the fly (this is performed\n    prior to the auto-contraction together wit the above directions)\n\n      X,'--op:&lt;tag&gt;[:&lt;opl=op&gt;]'\n         specify itags for given (e.g. local) operator.\n\n         The last option considers X an operator, and hence assumes\n         operator itags '&lt;tag&gt;;&lt;tag&gt;*[;opl*]' for QSpace X;\n         the default operator label is `op', but may be changed\n         by specifying a trailing ':&lt;opl&gt;' as indicated above.\n         As a safeguard, this issues a warning, if existing itags are\n         overwritten. This is relevant e.g. for local operators that\n         are applied to a very specific site with associated itag.\n\n         [11/2018] the specified &lt;tag&gt; may now also represent\n         a regular expression (regexp), recognized by non-alphabetic\n         special characters, while ignoring conj-flags (without\n         special characters, the specified &lt;tag&gt; is taken as is!).\n         This usage then searches for a matching itag in the paired\n         up QSpace (cell) in the contraction.\n\n         Ex. Consider A some QSpace with a single local index\n         that starts with `s', e.g., like 's010' for site 10;\n         then contract(A,Xloc,'-op:^s') will autocontract\n         the local operator Xloc to the correct local index in A\n         (here the regex `^s' indicates `starts with s');\n         An alternative operator itag may still be specified\n         by adding a trailing ':opl' as indicated earlier.\n\n      A,'--itag:s/pat/rep/[gi]   [07/2023]\n\n         replace/modify existing itags on the fly for a particular\n         recursive level of a cell contraction based on regular\n         expressions (regex; using ECMAScript grammar, cf. C++/regex).\n         The syntax is much analogous to perl regex.\n\n         The trailing flags enable case insensitive replacement [i]\n         and global replacement [g] of all possible matches\n         (by default, only the first match is replaced).\n\n    An adaptation of usage #2 can also be used\n    for plain sequential contractions\n\n        S=contractQS(A [,flagsA],B [,flagsB],C,... [, perm, OPTS ])\n\n    which is equivalent to\n    S=contractQS({A [,flagsA],{B [,flagsB], {C,...}}}, [,perm,OPTS ]).\n    That is, by grouping A*(B*(C*...)), sequential contractions start\n    from the right end onwards to the beginning of the specified set.\n    This structure is also permitted at any lower level inside cell\n    contractions. Non-contracted indices are always collected in the\n    order they appear in the input.\n\nThe remaining trailing OPTS are\n\n    perm  optional permutation (non-string) on the final object;\n          this permutation can be shorter than the actual rank\n          of the resulting QSpace, which then is completed as\n          an identity permutation on the remainder of indices.\n\n          By permitting the specification of indices to contract\n          also in contractions based on itags (cell-contractions)\n          there is a potential ambiguity of whether perm should\n          be interpreted as indices on the last specified tensor\n          (the latter may also be represented in compact string\n          format for better differentiation).\n\n          Hence the rules for perm to be interpreted as permutation\n          requires that (i) it is a valid permutation of length\n          r&gt;=2 to start with, and (ii) that it is in numeric format,\n          i.e., not written as compact string. Valid examples are\n          [2 1], [2 3 1], but not, e.g., 1, [2 3], or '21'.\n\n          The ambiguity above is fully circumvented when also\n          wrapping the last contraction at base level into a cell,\n          such as contractQS({A,...},perm [,'-v']) [see above],\n          in which case perm is always interpreted as permutation\n          on the overall result, irrespective of rank or whether\n          specified as numeric or compact string index. In case\n          of a string, this then also permits to specify an optional\n          conjugate flag to be applied on the overall result.\n\n    '-v'  debug mode that shows all levels of a cell contraction\n          together with the actual contractions performed\n          based on shown itags. Internally, degenerate itags are\n          frequently flagged by making use of signed characters,\n          which makes them unique and thus differentiate them.\n          When printed, flagged itags are formatted as \"&lt;itag&gt;|b\"\n          where the character `|' separates the actual itag string\n          from number b (int8 decimal) which in its binary form\n          reflects the internal flags.\n\nMixed usage of #2 and #1 is not possible.\nUsage #2 is typically recommended because auto-contraction\nmakes it far easier to contract entire networks in a single go\nwithout having to manually track and specify index locations.\n\nAW (C) May 2010-2023\n</code></pre>"},{"location":"reference/getLocalSpace/","title":"getLocalSpace","text":"<pre><code>function [FF,..,Iout]=getLocalSpace(model [,'sym1,sym2,...',varargin])\n\n  build local model state space as specified by means of the typical\n  associated operators such as spin (S), annihilation (F), or\n  charge parity operator (Z).\n\n  The residual info structure Iout contains further operators\n  (if applicable), such as the identity operator (E), the spinor for\n  particle-hole symmetry (C3), its equivalent to the Casimir operator\n  S^2 (C2), or Q2 := (N-1)^2, with N the total particle number summed\n  over all channels, as required for isotropic Coulomb interaction.\n\nModels available\n\n   [F,Z,S,I]=getLocalSpace('FermionS',sym [,opts]);   spinful fermions\n   [F,Z,  I]=getLocalSpace('Fermion', sym [,opts]);   spinless fermions\n   [S,    I]=getLocalSpace('Spin', S      [,opts]);   spin-S operators [SU(2)]\n   [S,    I]=getLocalSpace('SUN',N        [,opts]);   SU(N) site\n   [S,    I]=getLocalSpace('SU&lt;N&gt;',       [,opts]);   same as previous\n   [S,    I]=getLocalSpace('SON',5,       [,opts]);   SO(N) site\n   [S,    I]=getLocalSpace('SO&lt;N&gt;',       [,opts]);   SO(N) site\n   [S,    I]=getLocalSpace('Sp&lt;2N&gt;',      [,opts]);   Sp(SN) site\n\nOptions\n\n  'NC',..  number of channels (fermionic systems only)\n  '-A',..  use abelian symmetry (in 'Spin' mode only)\n  '-v'     verbose mode\n\nSymmetries for sym (single string, separated by commas)\n\n  'Acharge'      abelian total charge;        Acharge(:)  *)\n  'SU2charge'    SU(2) total particle-hole;   SU2charge(:) *)\n  'Aspin'        abelian total spin\n  'SU2spin'      SU(2) total spin (S)\n  'SU2spinJ'     SU(2) total spin (J=L+S)\n  'AspinJ'       U(1) total spin (J=L+S)_z\n  'SUNchannel'   SU(N) channel symmetry\n  'SONchannel'   SO(N) channel symmetry\n  'SpNchannel'   Sp(N) particle/hole (charge) * channel symmetry\n\n*) sym(:) indicates to use given symmetry &lt;sym&gt; for each\n   of the NC channels individually.\n\nExamples\n\n three channels with particle-hole SU(2) in each channel and total spin SU(2)\n   [FF,Z,SS,IS]=getLocalSpace('FermionS','SU2charge(:),SU2spin','NC',3,'-v');\n\n three channels with abelian charge, SU(2) spin and SU(2) channel\n   [FF,Z,SS,IS]=getLocalSpace('FermionS','Acharge,SU2spin,SUNchannel','NC',3,'-v');\n   [FF,Z,SS,IS]=getLocalSpace('FermionS','Acharge,SU2spin,SU3channel','-v'); same\n\n three channels with SO(N) symmetry\n so far NC=3 only since this reduces to SU(2) with integer spins\n   [FF,Z,SS,IS]=getLocalSpace('FermionS','Acharge,SU2spin,SO3channel','-v');\n   --&gt; IS.L3 contains L=1 `spin opertors' in orbital space\n\n three channels with SU2spinJ symmetry (total J=L+S)\n   [FF,Z,JJ,IS]=getLocalSpace('FermionS','Acharge,SU2spinJ','NC',3,'-v');\n\n three spinless channels with SU(3) channel symmetry\n   [FF,Z,IS]=getLocalSpace('Fermion','SUNchannel','NC',3,'-v');\n\n single spin-S site\n   [S,IS]=getLocalSpace('Spin',1,'-v'); \n\n   [S,IS]=getLocalSpace('SUN',3,'-v');  same as ...\n   [S,IS]=getLocalSpace('SU3','-v');\n\nExamples with flavor groups / split channels // Wb,Feb16,18\n\n   [FF,Z,SS,IS]=getLocalSpace('FermionS','SU2spin,Acharge,SUNchannel','NC',[2 1],'-v');\n\n   [FF,Z,IS]=getLocalSpace('Fermion','Acharge,SUNchannel','NC',[2 1],'-v');\n\n   note that in the spinless case for an odd number of flavors,\n   their total charge label is taken to half-filling;\n   therefor if a group in NC has odd number nc of flavors,x\n   then the total charge labels are given by (2*nc-1).\n   getLocalSpace issues a NB/WRN in that respect.\n\nWb,Jul09,11 ; Wb,Jul30,12\n</code></pre>"},{"location":"tutorial/getLocalSpace/","title":"Starting Point: <code>getLocalSpace</code>","text":"<p>The <code>getLocalSpace</code> function in the QSpace library is the foundational step for generating tensors with symmetries, serving as the crucial starting point for any tensor algorithm within this framework. It's designed to construct local model state spaces, incorporating a variety of quantum operators like spin, annihilation, and charge parity. The function also supports a wide range of symmetries, including abelian and non-abelian groups like SU(2) and SU(N). This makes <code>getLocalSpace</code> a versatile tool for building tensor networks with different symmetries, crucial for quantum physics research.</p>"},{"location":"tutorial/getLocalSpace/#understanding-the-function-syntax","title":"Understanding the Function Syntax","text":"<ul> <li>General Form: <code>[FF,...,Iout]=getLocalSpace(model, ['sym1,sym2,...', varargin])</code></li> <li>Parameters Explained:<ul> <li><code>model</code>: This denotes the quantum model type. It could be fermions (spinful/spinless), spin operators, etc.</li> <li><code>sym1, sym2, ...</code>: These are symmetries applicable to the model. Examples include total charge, spin, and particle-hole symmetry.</li> <li><code>varargin</code>: Additional options for customizing the function's operation, like specifying the number of channels or enabling verbose mode for detailed output.</li> </ul> </li> </ul>"},{"location":"tutorial/getLocalSpace/#delving-into-supported-models-and-options","title":"Delving into Supported Models and Options","text":"<p>The <code>getLocalSpace</code> function in QSpace supports a diverse range of models, each tailored for specific quantum systems. This includes:</p> <ol> <li>Fermionic Systems: Both spinful and spinless fermions are supported, allowing for simulations of electrons with or without spin considerations.</li> <li>Pure Spin Models: These models focus solely on the spin aspect, crucial for studies in spin dynamics and spin-based quantum interactions.</li> <li>Various Quantum Groups: The function supports a variety of groups like SU(2), SU(N), SO(N), and Sp(2N), each offering different symmetry structures for the tensors.</li> </ol> <p>In terms of options, <code>getLocalSpace</code> provides flexibility through parameters like:</p> <ul> <li><code>NC</code> (number of channels): Defines the complexity of the system, particularly in fermionic models.</li> <li><code>-A</code> (abelian symmetry): Simplifies the model by using abelian symmetries, useful for certain theoretical studies.</li> <li><code>-v</code> (verbose mode): Offers detailed output for in-depth analysis and debugging.</li> </ul> <p>Each model and option in <code>getLocalSpace</code> is designed to give users precise control over their tensor network configurations, making it a versatile tool in quantum physics research.</p>"},{"location":"tutorial/getLocalSpace/#comprehensive-guide-to-symmetries","title":"Comprehensive Guide to Symmetries","text":"<ul> <li>Symmetry Types Explained:<ul> <li><code>Acharge</code>: Represents abelian total charge symmetry, used in charge-conserving quantum models.</li> <li><code>SU2charge</code>: Denotes SU(2) symmetry for total particle-hole systems, pivotal in complex quantum systems.</li> <li><code>Aspin</code>: Abelian total spin symmetry, applicable in spin-conserving models.</li> <li><code>SU2spin</code>: A non-abelian symmetry representing total spin, essential for studying spin interactions.</li> <li><code>SU2spinJ</code>: Combines orbital (L) and spin (S) symmetries, denoted as J=L+S.</li> <li><code>AspinJ</code>: A U(1) symmetry for total spin (J=L+S)_z.</li> <li><code>SUNchannel</code>: Represents SU(N) channel symmetry, crucial for studying systems with N-level quantum states.</li> <li><code>SONchannel</code>: SO(N) channel symmetry, applicable in certain types of quantum models.</li> <li><code>SpNchannel</code>: Sp(N) symmetry, used in particle/hole charge models with channel symmetry.</li> </ul> </li> <li>Application: Each symmetry type tailors the quantum model to specific physical properties and interactions.</li> </ul>"},{"location":"tutorial/getLocalSpace/#examples","title":"Examples","text":"<ol> <li> <p>Pure Spin Model (Spin-1 System):</p> <ul> <li><code>[S,IS]=getLocalSpace('Spin',1,'-v');</code></li> <li>Configures a single spin-1 site, useful for studying isolated spin dynamics.</li> </ul> </li> <li> <p>Spinless Fermions with SU(3) Channel Symmetry:</p> <ul> <li><code>[FF,Z,IS]=getLocalSpace('Fermion','SUNchannel','NC',3,'-v');</code></li> <li>Sets up three spinless fermion channels with SU(3) symmetry.</li> </ul> </li> <li> <p>Spinful Fermions with Abelian Charge and SU(2) Spin:</p> <ul> <li><code>[FF,Z,SS,IS]=getLocalSpace('FermionS','Acharge,SU2spin','NC',3,'-v');</code></li> <li>Constructs a system with three channels, each having an abelian charge and an SU(2) spin symmetry.</li> </ul> </li> <li> <p>Spinful Fermions with Particle-Hole Symmetry:</p> <ul> <li><code>[FF,Z,SS,IS]=getLocalSpace('FermionS','SU2charge(:),SU2spin','NC',3,'-v');</code></li> <li>Creates a spinful fermion model with individual SU(2) charge symmetry in each of three channels and an overall SU(2) spin symmetry.</li> </ul> </li> <li> <p>Spinful Fermions with SU(2) SpinJ Symmetry:</p> <ul> <li><code>[FF,Z,JJ,IS]=getLocalSpace('FermionS','Acharge,SU2spinJ','NC',3,'-v');</code></li> <li>This example configures spinful fermions with a combined orbital and spin symmetry (SU(2) SpinJ).</li> </ul> </li> </ol>"},{"location":"tutorial/getLocalSpace/#decoding-the-outputs","title":"Decoding the Outputs","text":"<ul> <li>Output Variables: <code>FF</code>, <code>Iout</code>, and others vary based on the selected model. They represent the quantum states and operators configured by <code>getLocalSpace</code>.</li> <li>Usage in Quantum Models: These outputs form the backbone of tensor network states, used in simulations and calculations in quantum physics.</li> </ul>"}]}